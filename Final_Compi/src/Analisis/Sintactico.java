
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 12 00:45:39 CST 2018
//----------------------------------------------------

package Analisis;

import java_cup.runtime.*;
import final_compi.*;
import arbol.Nodo;
import java.util.ArrayList;
import java.util.Collection;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 12 00:45:39 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\003\000\002\013" +
    "\004\000\002\013\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\015\006\000\002\065\010\000\002\062\004\000\002" +
    "\062\003\000\002\064\004\000\002\064\005\000\002\063" +
    "\005\000\002\063\005\000\002\066\005\000\002\066\003" +
    "\000\002\067\005\000\002\070\005\000\002\070\003\000" +
    "\002\022\003\000\002\022\003\000\002\026\005\000\002" +
    "\026\003\000\002\030\004\000\002\030\003\000\002\027" +
    "\006\000\002\071\007\000\002\061\007\000\002\061\006" +
    "\000\002\061\006\000\002\061\006\000\002\061\006\000" +
    "\002\031\003\000\002\056\005\000\002\056\005\000\002" +
    "\056\005\000\002\056\005\000\002\056\005\000\002\056" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\072\004\000" +
    "\002\007\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\022\016\021\020\005\075\012\101\011\102" +
    "\010\103\023\104\013\105\024\001\002\000\024\002\ufffa" +
    "\016\ufffa\020\ufffa\075\ufffa\101\ufffa\102\ufffa\103\ufffa\104" +
    "\ufffa\105\ufffa\001\002\000\006\053\uffeb\075\uffeb\001\002" +
    "\000\024\002\ufffd\016\ufffd\020\ufffd\075\ufffd\101\ufffd\102" +
    "\ufffd\103\ufffd\104\ufffd\105\ufffd\001\002\000\004\075\106" +
    "\001\002\000\004\055\103\001\002\000\004\055\077\001" +
    "\002\000\006\046\041\053\042\001\002\000\004\055\035" +
    "\001\002\000\024\002\ufff9\016\ufff9\020\ufff9\075\ufff9\101" +
    "\ufff9\102\ufff9\103\ufff9\104\ufff9\105\ufff9\001\002\000\024" +
    "\002\000\016\021\020\005\075\012\101\011\102\010\103" +
    "\023\104\013\105\024\001\002\000\024\002\ufffe\016\ufffe" +
    "\020\ufffe\075\ufffe\101\ufffe\102\ufffe\103\ufffe\104\ufffe\105" +
    "\ufffe\001\002\000\024\002\ufffc\016\ufffc\020\ufffc\075\ufffc" +
    "\101\ufffc\102\ufffc\103\ufffc\104\ufffc\105\ufffc\001\002\000" +
    "\004\002\033\001\002\000\006\053\uffea\075\uffea\001\002" +
    "\000\024\002\ufffb\016\ufffb\020\ufffb\075\ufffb\101\ufffb\102" +
    "\ufffb\103\ufffb\104\ufffb\105\ufffb\001\002\000\004\055\030" +
    "\001\002\000\004\055\025\001\002\000\004\056\026\001" +
    "\002\000\004\047\027\001\002\000\024\002\uffdf\016\uffdf" +
    "\020\uffdf\075\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf\105" +
    "\uffdf\001\002\000\004\056\031\001\002\000\004\047\032" +
    "\001\002\000\024\002\uffe1\016\uffe1\020\uffe1\075\uffe1\101" +
    "\uffe1\102\uffe1\103\uffe1\104\uffe1\105\uffe1\001\002\000\004" +
    "\002\001\001\002\000\024\002\uffff\016\uffff\020\uffff\075" +
    "\uffff\101\uffff\102\uffff\103\uffff\104\uffff\105\uffff\001\002" +
    "\000\004\056\036\001\002\000\004\047\037\001\002\000" +
    "\024\002\uffe0\016\uffe0\020\uffe0\075\uffe0\101\uffe0\102\uffe0" +
    "\103\uffe0\104\uffe0\105\uffe0\001\002\000\006\046\074\053" +
    "\042\001\002\000\012\072\051\073\050\074\044\075\047" +
    "\001\002\000\014\054\045\072\051\073\050\074\044\075" +
    "\047\001\002\000\032\036\ufff5\041\ufff5\042\ufff5\043\ufff5" +
    "\045\ufff5\046\ufff5\047\ufff5\050\ufff5\053\ufff5\054\ufff5\056" +
    "\ufff5\060\ufff5\001\002\000\026\036\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\045\uffd3\047\uffd3\050\uffd3\054\uffd3\056\uffd3\060" +
    "\uffd3\001\002\000\032\036\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\045\ufff4\046\ufff4\047\ufff4\050\ufff4\053\ufff4\054\ufff4\056" +
    "\ufff4\060\ufff4\001\002\000\026\036\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\045\uffd8\047\uffd8\050\uffd8\054\uffd8\056\uffd8\060" +
    "\uffd8\001\002\000\030\036\uffd6\041\uffd6\042\uffd6\043\uffd6" +
    "\045\uffd6\047\uffd6\050\uffd6\053\042\054\uffd6\056\uffd6\060" +
    "\uffd6\001\002\000\026\036\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\045\uffd7\047\uffd7\050\uffd7\054\uffd7\056\uffd7\060\uffd7\001" +
    "\002\000\026\036\uffd4\041\uffd4\042\uffd4\043\uffd4\045\uffd4" +
    "\047\uffd4\050\uffd4\054\uffd4\056\uffd4\060\uffd4\001\002\000" +
    "\026\036\uffd5\041\uffd5\042\uffd5\043\uffd5\045\uffd5\047\uffd5" +
    "\050\uffd5\054\uffd5\056\uffd5\060\uffd5\001\002\000\004\054" +
    "\067\001\002\000\026\036\055\041\056\042\057\043\061" +
    "\045\060\047\uffde\050\uffde\054\uffde\056\uffde\060\uffde\001" +
    "\002\000\012\072\051\073\050\074\044\075\047\001\002" +
    "\000\012\072\051\073\050\074\044\075\047\001\002\000" +
    "\012\072\051\073\050\074\044\075\047\001\002\000\012" +
    "\072\051\073\050\074\044\075\047\001\002\000\012\072" +
    "\051\073\050\074\044\075\047\001\002\000\026\036\uffda" +
    "\041\uffda\042\uffda\043\uffda\045\uffda\047\uffda\050\uffda\054" +
    "\uffda\056\uffda\060\uffda\001\002\000\026\036\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\045\uffd9\047\uffd9\050\uffd9\054\uffd9\056" +
    "\uffd9\060\uffd9\001\002\000\026\036\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\045\uffdb\047\uffdb\050\uffdb\054\uffdb\056\uffdb\060" +
    "\uffdb\001\002\000\026\036\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\045\uffdc\047\uffdc\050\uffdc\054\uffdc\056\uffdc\060\uffdc\001" +
    "\002\000\026\036\uffdd\041\uffdd\042\uffdd\043\uffdd\045\uffdd" +
    "\047\uffdd\050\uffdd\054\uffdd\056\uffdd\060\uffdd\001\002\000" +
    "\032\036\ufff3\041\ufff3\042\ufff3\043\ufff3\045\ufff3\046\ufff3" +
    "\047\ufff3\050\ufff3\053\ufff3\054\ufff3\056\ufff3\060\ufff3\001" +
    "\002\000\030\036\uffd2\041\uffd2\042\uffd2\043\uffd2\045\uffd2" +
    "\047\uffd2\050\uffd2\053\042\054\uffd2\056\uffd2\060\uffd2\001" +
    "\002\000\032\036\ufff6\041\ufff6\042\ufff6\043\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\050\ufff6\053\ufff6\054\ufff6\056\ufff6\060" +
    "\ufff6\001\002\000\004\047\073\001\002\000\024\002\uffe5" +
    "\016\uffe5\020\uffe5\075\uffe5\101\uffe5\102\uffe5\103\uffe5\104" +
    "\uffe5\105\uffe5\001\002\000\012\072\051\073\050\074\044" +
    "\075\047\001\002\000\004\047\076\001\002\000\024\002" +
    "\uffe4\016\uffe4\020\uffe4\075\uffe4\101\uffe4\102\uffe4\103\uffe4" +
    "\104\uffe4\105\uffe4\001\002\000\012\072\051\073\050\074" +
    "\044\075\047\001\002\000\004\056\101\001\002\000\004" +
    "\047\102\001\002\000\024\002\uffe3\016\uffe3\020\uffe3\075" +
    "\uffe3\101\uffe3\102\uffe3\103\uffe3\104\uffe3\105\uffe3\001\002" +
    "\000\004\056\104\001\002\000\004\047\105\001\002\000" +
    "\024\002\uffe2\016\uffe2\020\uffe2\075\uffe2\101\uffe2\102\uffe2" +
    "\103\uffe2\104\uffe2\105\uffe2\001\002\000\012\046\uffe8\047" +
    "\uffe8\050\uffe8\053\042\001\002\000\010\046\110\047\uffd1" +
    "\050\113\001\002\000\012\072\051\073\050\074\044\075" +
    "\047\001\002\000\004\047\115\001\002\000\004\047\uffe6" +
    "\001\002\000\004\075\114\001\002\000\010\046\uffe9\047" +
    "\uffe9\050\uffe9\001\002\000\024\002\ufff8\016\ufff8\020\ufff8" +
    "\075\ufff8\101\ufff8\102\ufff8\103\ufff8\104\ufff8\105\ufff8\001" +
    "\002\000\004\047\uffe7\001\002\000\006\046\120\053\042" +
    "\001\002\000\006\007\123\057\122\001\002\000\004\047" +
    "\141\001\002\000\004\057\130\001\002\000\006\016\021" +
    "\020\005\001\002\000\004\053\042\001\002\000\006\047" +
    "\ufff2\053\042\001\002\000\006\050\137\060\136\001\002" +
    "\000\006\050\uffef\060\uffef\001\002\000\012\072\051\073" +
    "\050\074\044\075\047\001\002\000\006\050\134\060\133" +
    "\001\002\000\006\050\uffec\060\uffec\001\002\000\006\050" +
    "\uffee\060\uffee\001\002\000\012\072\051\073\050\074\044" +
    "\075\047\001\002\000\006\050\uffed\060\uffed\001\002\000" +
    "\004\047\ufff1\001\002\000\004\057\130\001\002\000\006" +
    "\050\ufff0\060\ufff0\001\002\000\024\002\ufff7\016\ufff7\020" +
    "\ufff7\075\ufff7\101\ufff7\102\ufff7\103\ufff7\104\ufff7\105\ufff7" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\024\002\017\013\014\014\015\015\005\022" +
    "\006\027\021\061\013\065\016\071\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\062\037\064\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\014\033\015\005\022\006\027\021\061\013" +
    "\065\016\071\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\070\001\001\000\012\031\071\056\053\057" +
    "\045\072\051\001\001\000\012\031\052\056\053\057\045" +
    "\072\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\062\067\064\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\057\065" +
    "\072\051\001\001\000\006\057\064\072\051\001\001\000" +
    "\006\057\063\072\051\001\001\000\006\057\062\072\051" +
    "\001\001\000\006\057\061\072\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\031\074\056\053\057\045\072\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\031\077\056\053" +
    "\057\045\072\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\062\116\064\042\001\001\000" +
    "\006\007\111\030\110\001\001\000\012\031\115\056\053" +
    "\057\045\072\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\070\001\001\000\004\063" +
    "\120\001\001\000\002\001\001\000\006\066\125\067\126" +
    "\001\001\000\004\022\123\001\001\000\006\062\124\064" +
    "\042\001\001\000\004\064\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\031\131\056\053\057\045\070" +
    "\130\072\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\031\134\056\053\057\045\072" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\067\137\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador --------------------------------------------------------"
        +s.value + " no reconocido." );
        
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error en la Línea " + (s.right+1)+ "Columna "+(s.left+1) +". Identificador -----------------------------------------------------------" +
        s.value + " no reconocido.");
        
    
    }

    /*public Nodo getRaiz(){
        return action_obj.raiz;
    }*/

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


    //Nodo raiz=null;
    ArrayList<Nodo> CC_hijos = new ArrayList();
    ArrayList<Nodo> LL_iden = new ArrayList();
    ArrayList<Nodo> LL_vector = new ArrayList();

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EPSILON ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EPSILON",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LLAMAR_VECTOR ::= iden LISTA_DIMEN 
            {
              Object RESULT =null;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Nodo n = new Nodo("IDEN",t3right,t3left,t3); 
                                            Nodo n1 = new Nodo("DIMENSION \n VECTOR",0,0,"-");
                                            n1.hijos.addAll((Collection<? extends Nodo>) LL_vector);
                                            ArrayList<Nodo> hermanos = new ArrayList();
                                            hermanos.add(n);hermanos.add(n1);
                                            LL_vector.clear();
                                            RESULT = hermanos;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMAR_VECTOR",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // T ::= cadena 
            {
              Object RESULT =null;
		int t5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo n = new Nodo("String",t5right,t5left,t5); ArrayList<Nodo> hermanos = new ArrayList();hermanos.add(n);RESULT = hermanos;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // T ::= entero 
            {
              Object RESULT =null;
		int t4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo n = new Nodo("Double",t4right,t4left,t4); ArrayList<Nodo> hermanos = new ArrayList();hermanos.add(n);RESULT = hermanos;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // T ::= LLAMAR_VECTOR 
            {
              Object RESULT =null;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo n = new Nodo("LLAMAR \n VECTOR",0,0,"-"); n.hijos.addAll((Collection<? extends Nodo>) t3); ArrayList<Nodo> hermanos = new ArrayList();hermanos.add(n);RESULT = hermanos;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // T ::= iden 
            {
              Object RESULT =null;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo n = new Nodo("ID",t2right,t2left,t2);  ArrayList<Nodo> hermanos = new ArrayList();hermanos.add(n);RESULT = hermanos;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // T ::= decimal 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo n = new Nodo("Double",t1right,t1left,t1); ArrayList<Nodo> hermanos = new ArrayList();hermanos.add(n);RESULT = hermanos;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("T",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= T 
            {
              Object RESULT =null;
		int t6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = t6; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= E pot T 
            {
              Object RESULT =null;
		int e5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int m5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int m5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String m5 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo n = new Nodo("Poten",m5right,m5left,"^"); n.hijos.addAll((Collection<? extends Nodo>) e5);
                                        n.hijos.addAll((Collection<? extends Nodo>) t5);  ArrayList<Nodo> hermanos = new ArrayList();hermanos.add(n);RESULT = hermanos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= E div T 
            {
              Object RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int m4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int m4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String m4 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo n = new Nodo("Div",m4right,m4left,"/"); n.hijos.addAll((Collection<? extends Nodo>) e4);
                                        n.hijos.addAll((Collection<? extends Nodo>) t4);  ArrayList<Nodo> hermanos = new ArrayList();hermanos.add(n);RESULT = hermanos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // E ::= E mul T 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int m3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int m3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String m3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo n = new Nodo("Multi",m3right,m3left,"*"); n.hijos.addAll((Collection<? extends Nodo>) e3);
                                        n.hijos.addAll((Collection<? extends Nodo>) t3);  ArrayList<Nodo> hermanos = new ArrayList();hermanos.add(n);RESULT = hermanos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // E ::= E menos T 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String m2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo n = new Nodo("Menos",m2right,m2left," - "); n.hijos.addAll((Collection<? extends Nodo>) e2);
                                        n.hijos.addAll((Collection<? extends Nodo>) t2);  ArrayList<Nodo> hermanos = new ArrayList();hermanos.add(n);RESULT = hermanos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // E ::= E mas T 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String m1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo n = new Nodo("Mas",m1right,m1left,"+"); n.hijos.addAll((Collection<? extends Nodo>) e1);
                                        n.hijos.addAll((Collection<? extends Nodo>) t1);  ArrayList<Nodo> hermanos = new ArrayList();hermanos.add(n);RESULT = hermanos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP ::= E 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = e2; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NATIVAS ::= resClean para parc puntoComa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 Nodo n = new Nodo("CLEAN",cright,cleft,"-"); ArrayList<Nodo> hermanos = new ArrayList();hermanos.add(n);RESULT = hermanos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NATIVAS",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NATIVAS ::= resTabla para parc puntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 Nodo n = new Nodo("TABLA",tright,tleft,"-"); ArrayList<Nodo> hermanos = new ArrayList();hermanos.add(n);RESULT = hermanos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NATIVAS",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NATIVAS ::= resErrores para parc puntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 Nodo n = new Nodo("ERRORES",eright,eleft,"-"); ArrayList<Nodo> hermanos = new ArrayList();hermanos.add(n);RESULT = hermanos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NATIVAS",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NATIVAS ::= resDibujar para parc puntoComa 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 Nodo n = new Nodo("DIBUJAR",dright,dleft,"-"); ArrayList<Nodo> hermanos = new ArrayList();hermanos.add(n);RESULT = hermanos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NATIVAS",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NATIVAS ::= resPrint para EXP parc puntoComa 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 Nodo n = new Nodo("PRINT",pright,pleft,"-"); n.hijos.addAll((Collection<? extends Nodo>) e);ArrayList<Nodo> hermanos = new ArrayList();hermanos.add(n);RESULT = hermanos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NATIVAS",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGNACION_VECTOR ::= iden LISTA_DIMEN igual EXP puntoComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		Nodo n = new Nodo("ID",idright,idleft,id);
            Nodo n1 = new Nodo("DIMENSION \n VECTOR",0,0,"-");
            Nodo n2 = new Nodo("EXPRESION",0,0,"-");

            n1.hijos.addAll((Collection<? extends Nodo>) LL_vector);
            n2.hijos.addAll((Collection<? extends Nodo>) exp);;

            ArrayList<Nodo> hermanos = new ArrayList();
            hermanos.add(n);
            hermanos.add(n1);
            hermanos.add(n2);
            LL_vector.clear();
            RESULT = hermanos;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VECTOR",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNACION ::= iden igual EXP puntoComa 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		Nodo n = new Nodo("ID",idright,idleft,id);
            Nodo n1 = new Nodo("EXPRESION",0,0,"-");

            n1.hijos.addAll((Collection<? extends Nodo>) exp);;

            ArrayList<Nodo> hermanos = new ArrayList();
            hermanos.add(n);
            hermanos.add(n1);
            RESULT = hermanos;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGNACION_DECLARACION ::= EPSILON 
            {
              Object RESULT =null;
		 Nodo n = new Nodo("EPSILON",0,0,"-"); RESULT = n; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIGNACION_DECLARACION ::= igual EXP 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo n = new Nodo("EXPRESION",0,0,"-"); n.hijos.addAll((Collection<? extends Nodo>) exp); RESULT = n; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_DECLARACION",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA_IDEN ::= iden 
            {
              Object RESULT =null;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo n = new Nodo("ID",id2right,id2left,id2);LL_iden.add((Nodo) n); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_IDEN",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTA_IDEN ::= LISTA_IDEN coma iden 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo n = new Nodo("ID",id1right,id1left,id1);LL_iden.add((Nodo) n); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_IDEN",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_DATO ::= resDouble 
            {
              Object RESULT =null;
		RESULT= "Double";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_DATO ::= resString 
            {
              Object RESULT =null;
		RESULT= "String";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEF_VALORES ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEF_VALORES",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DEF_VALORES ::= DEF_VALORES coma EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEF_VALORES",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VALORES ::= llavea DEF_VALORES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALORES",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_VALORES ::= VALORES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTA_VALORES ::= LISTA_VALORES coma VALORES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VECTOR ::= llavea LISTA_VALORES llavec 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VECTOR",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VECTOR ::= resNew TIPO_DATO LISTA_DIMEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VECTOR",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DIME ::= cora EXP corc 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Nodo n = new Nodo("VEC_HI",0,0," [] "); n.hijos.addAll((Collection<? extends Nodo>) e); RESULT = n; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIME",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DIME ::= cora corc 
            {
              Object RESULT =null;
		 Nodo n = new Nodo("VEC",0,0," []"); RESULT = n; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DIME",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA_DIMEN ::= DIME 
            {
              Object RESULT =null;
		int d2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LL_vector.add((Nodo) d2); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_DIMEN",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA_DIMEN ::= LISTA_DIMEN DIME 
            {
              Object RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LL_vector.add((Nodo) d1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA_DIMEN",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLA_VECTOR ::= TIPO_DATO iden LISTA_DIMEN igual VECTOR puntoComa 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		Nodo n = new Nodo("TIPO DE DATO",tipright,tipleft,tip);
            Nodo n1 = new Nodo("ID",idright,idleft,id);
            Nodo n2 = new Nodo("DIMENSION \n VECTOR",0,0,"-");

            n2.hijos.addAll((Collection<? extends Nodo>) LL_vector);

            ArrayList<Nodo> hermanos = new ArrayList();
            hermanos.add(n);
            hermanos.add(n1);
            hermanos.add(n2);
            LL_vector.clear();
            RESULT = hermanos;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLA_VECTOR",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= TIPO_DATO LISTA_IDEN ASIGNACION_DECLARACION puntoComa 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object ad = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		Nodo n = new Nodo("TIPO DE DATO",tipright,tipleft,tip);
            Nodo n1 = new Nodo("LISTA ID",0,0,"-");
            Nodo n2 = new Nodo("ASIGNACION",0,0,"-");

            n1.hijos.addAll((Collection<? extends Nodo>) LL_iden);
            n2.hijos.add((Nodo) ad);

            ArrayList<Nodo> hermanos = new ArrayList();
            hermanos.add(n);
            hermanos.add(n1);
            hermanos.add(n2);
            LL_iden.clear();
            RESULT = hermanos;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CODIGO_CUERPO ::= NATIVAS 
            {
              Object RESULT =null;
		int c5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int c5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo n = new Nodo("FUN \n NATIVAS",0,0,"-");              n.hijos.addAll((Collection<? extends Nodo>) c5);RESULT = n; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_CUERPO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CODIGO_CUERPO ::= ASIGNACION_VECTOR 
            {
              Object RESULT =null;
		int c4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int c4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo n = new Nodo("ASIGNACION \n EN \n VECTORES",0,0,"-");n.hijos.addAll((Collection<? extends Nodo>) c4);RESULT = n; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_CUERPO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CODIGO_CUERPO ::= ASIGNACION 
            {
              Object RESULT =null;
		int c3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int c3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo n = new Nodo("ASIGNACION \n EN \n VARIABLES",0,0,"-");n.hijos.addAll((Collection<? extends Nodo>) c3);RESULT = n; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_CUERPO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CODIGO_CUERPO ::= DECLA_VECTOR 
            {
              Object RESULT =null;
		int c2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo n = new Nodo("DECLARACION \n DE \n VECTORES",0,0,"-");n.hijos.addAll((Collection<? extends Nodo>) c2);RESULT = n; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_CUERPO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CODIGO_CUERPO ::= DECLARACION 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo n = new Nodo("DECLARACION \n DE \n VARIABLES",0,0,"-");n.hijos.addAll((Collection<? extends Nodo>) c1);RESULT = n; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO_CUERPO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODIGO ::= CODIGO_CUERPO 
            {
              Object RESULT =null;
		int c2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 CC_hijos.add((Nodo) c2); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CODIGO ::= CODIGO CODIGO_CUERPO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 CC_hijos.add((Nodo) c1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CODIGO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INI ::= CODIGO 
            {
              Object RESULT =null;
		int Codleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int Codright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object Cod = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("Exito");
                      Nodo n = new Nodo("Inicio",0,0,"-");n.hijos.addAll((Collection<? extends Nodo>) CC_hijos);Interfaz.arbol = n; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INI",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INI EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

